json = require('json')
print("=== TIM3 MONITORING DASHBOARD ===")
TIM3_PROCESS = ao.id
REFRESH_INTERVAL = 5
MONITOR_ACTIVE = false
function displayDashboard() os.execute("clear"); print("╔══════════════════════════════════════════════════════════════╗"); print("║                    TIM3 MONITORING DASHBOARD                  ║"); print("╚══════════════════════════════════════════════════════════════╝"); print("") end
function fetchMetrics() local metrics = {}; Send({Target = TIM3_PROCESS, Action = "Stats"}); os.execute("sleep 1"); local statsMsg = Inbox[#Inbox]; if statsMsg and statsMsg.Action == "Stats-Response" then metrics.stats = json.decode(statsMsg.Data) end; Send({Target = TIM3_PROCESS, Action = "Info"}); os.execute("sleep 1"); local infoMsg = Inbox[#Inbox]; if infoMsg and infoMsg.Action == "Info-Response" then metrics.info = json.decode(infoMsg.Data) end; Send({Target = TIM3_PROCESS, Action = "Balances"}); os.execute("sleep 1"); local balMsg = Inbox[#Inbox]; if balMsg and balMsg.Action == "Balances-Response" then metrics.balances = json.decode(balMsg.Data) end; return metrics end
function formatNumber(num) local n = tonumber(num) or 0; if n >= 1000000 then return string.format("%.2fM", n/1000000) elseif n >= 1000 then return string.format("%.2fK", n/1000) else return tostring(n) end end
function displayMetrics(metrics) if not metrics or not metrics.stats then print("⚠️  Unable to fetch metrics"); return end; print("📊 CONTRACT METRICS"); print("├─ Name: " .. (metrics.info and metrics.info.Name or "TIM3")); print("├─ Ticker: " .. (metrics.info and metrics.info.Ticker or "TIM3")); print("├─ Process ID: " .. TIM3_PROCESS); print("└─ Status: 🟢 Active"); print(""); print("💰 SUPPLY & COLLATERAL"); print("├─ Total Supply: " .. formatNumber(metrics.stats.TotalSupply) .. " TIM3"); print("├─ USDA Locked: " .. formatNumber(metrics.stats.UsdaCollateral) .. " USDA"); print("└─ Collateral Ratio: " .. string.format("%.2f%%", (metrics.stats.CollateralRatio or 1) * 100)); print(""); print("📈 ACTIVITY STATISTICS"); print("├─ Total Swaps: " .. tostring(metrics.stats.SwapStats.totalSwaps)); print("├─ Total Burns: " .. tostring(metrics.stats.SwapStats.totalBurns)); print("└─ Total Volume: " .. formatNumber(metrics.stats.SwapStats.totalVolume)); print("") end
function displayTopHolders(balances) if not balances then return end; local holders = {}; for user, balance in pairs(balances) do if tonumber(balance) > 0 then table.insert(holders, {user = user, balance = tonumber(balance)}) end end; table.sort(holders, function(a, b) return a.balance > b.balance end); print("👥 TOP HOLDERS"); local count = 0; for i, holder in ipairs(holders) do if count >= 5 then break end; local addr = string.sub(holder.user, 1, 8) .. "..." .. string.sub(holder.user, -6); print("├─ " .. addr .. ": " .. formatNumber(holder.balance)); count = count + 1 end; if #holders > 5 then print("└─ +" .. (#holders - 5) .. " more holders") else print("└─ Total: " .. #holders .. " holders") end; print("") end
function calculateHealth(metrics) if not metrics or not metrics.stats then return "UNKNOWN", "⚠️" end; local ratio = metrics.stats.CollateralRatio or 1; local swaps = metrics.stats.SwapStats.totalSwaps or 0; local burns = metrics.stats.SwapStats.totalBurns or 0; if ratio == 1 and swaps > 0 then return "HEALTHY", "🟢" elseif ratio > 0.95 and ratio <= 1.05 then return "NORMAL", "🟡" else return "WARNING", "🔴" end end
function displayHealth(metrics) local status, icon = calculateHealth(metrics); print("🏥 SYSTEM HEALTH"); print("├─ Status: " .. icon .. " " .. status); print("├─ Collateral: " .. (metrics.stats.UsdaCollateral == metrics.stats.TotalSupply and "✅ Fully Backed" or "⚠️ Check Ratio")); print("└─ Last Check: " .. os.date("%Y-%m-%d %H:%M:%S")); print("") end
function showDashboard() displayDashboard(); local metrics = fetchMetrics(); displayMetrics(metrics); displayTopHolders(metrics.balances); displayHealth(metrics); print("═══════════════════════════════════════════════════════════════"); print("Commands: startMonitor(), stopMonitor(), refresh()"); print("Update Interval: " .. REFRESH_INTERVAL .. " seconds"); return metrics end
function startMonitor() MONITOR_ACTIVE = true; print("📡 Starting continuous monitoring..."); while MONITOR_ACTIVE do showDashboard(); if MONITOR_ACTIVE then print("\nRefreshing in " .. REFRESH_INTERVAL .. " seconds... (stopMonitor() to stop)"); os.execute("sleep " .. REFRESH_INTERVAL) end end end
function stopMonitor() MONITOR_ACTIVE = false; print("\n🛑 Monitoring stopped") end
function refresh() showDashboard() end
function quickStats() local metrics = fetchMetrics(); if metrics and metrics.stats then print("\n⚡ QUICK STATS"); print("Supply: " .. formatNumber(metrics.stats.TotalSupply) .. " | Collateral: " .. formatNumber(metrics.stats.UsdaCollateral)); print("Swaps: " .. metrics.stats.SwapStats.totalSwaps .. " | Burns: " .. metrics.stats.SwapStats.totalBurns); print("Volume: " .. formatNumber(metrics.stats.SwapStats.totalVolume)) else print("Unable to fetch stats") end end
function exportMetrics() local metrics = fetchMetrics(); local timestamp = os.time(); local export = { timestamp = timestamp, date = os.date("%Y-%m-%d %H:%M:%S", timestamp), process_id = TIM3_PROCESS, metrics = metrics }; print("\n📤 METRICS EXPORT"); print(json.encode(export)); return export end
print("\n=== MONITORING COMMANDS ===")
print("showDashboard() - Display full dashboard")
print("startMonitor() - Start continuous monitoring")
print("stopMonitor() - Stop monitoring")
print("refresh() - Refresh dashboard once")
print("quickStats() - Show quick statistics")
print("exportMetrics() - Export metrics as JSON")
print("\nRun 'showDashboard()' to view current status")