json = require('json')
print("=== TIM3 TEST SUITE ===")
print("Testing contract: " .. ao.id)
TEST_USER = "test_user_" .. tostring(os.time())
TEST_USER2 = "test_user2_" .. tostring(os.time())
TEST_AMOUNT = "1000000"
function testInfo() print("\n[TEST] Info Handler"); Send({Target = ao.id, Action = "Info"}); os.execute("sleep 1"); local msg = Inbox[#Inbox]; if msg and msg.Action == "Info-Response" then local data = json.decode(msg.Data); print("✓ Info received - Name: " .. data.Name .. ", Ticker: " .. data.Ticker); return true else print("✗ Info test failed"); return false end end
function testBalance() print("\n[TEST] Balance Handler"); Send({Target = ao.id, Action = "Balance"}); os.execute("sleep 1"); local msg = Inbox[#Inbox]; if msg and msg.Action == "Balance-Response" then print("✓ Balance query successful"); return true else print("✗ Balance test failed"); return false end end
function testStats() print("\n[TEST] Stats Handler"); Send({Target = ao.id, Action = "Stats"}); os.execute("sleep 1"); local msg = Inbox[#Inbox]; if msg and msg.Action == "Stats-Response" then local data = json.decode(msg.Data); print("✓ Stats - Supply: " .. data.TotalSupply .. ", Collateral: " .. data.UsdaCollateral); return true else print("✗ Stats test failed"); return false end end
function simulateUsdaDeposit(user, amount) print("\n[TEST] Simulating USDA deposit for " .. user .. " amount: " .. amount); Send({ Target = ao.id, From = USDA_PROCESS_ID, Action = "Credit-Notice", Data = json.encode({ Sender = user, Quantity = amount }) }); os.execute("sleep 1"); return true end
function checkBalance(user) Send({Target = ao.id, Action = "Balance", Tags = {Target = user}}); os.execute("sleep 1"); local msg = Inbox[#Inbox]; if msg and msg.Action == "Balance-Response" then local data = json.decode(msg.Data); print("Balance for " .. user .. ": " .. data.balance); return tonumber(data.balance) else print("Failed to get balance for " .. user); return 0 end end
function testTransfer(from, to, amount) print("\n[TEST] Transfer from " .. from .. " to " .. to .. " amount: " .. amount); Send({ Target = ao.id, From = from, Action = "Transfer", Tags = { Recipient = to, Quantity = amount } }); os.execute("sleep 1"); return true end
function testBurn(user, amount) print("\n[TEST] Burn TIM3 for " .. user .. " amount: " .. amount); Send({ Target = ao.id, From = user, Action = "Transfer", Tags = { Recipient = "burn", Quantity = amount } }); os.execute("sleep 1"); local msg = Inbox[#Inbox]; if msg and msg.Action == "Burn-Success" then print("✓ Burn successful"); return true elseif msg and msg.Action == "Burn-Error" then print("✗ Burn failed: " .. msg.Data); return false else print("✗ No burn response"); return false end end
function runAllTests() local results = {}; results.info = testInfo(); results.balance = testBalance(); results.stats = testStats(); simulateUsdaDeposit(TEST_USER, TEST_AMOUNT); results.deposit = checkBalance(TEST_USER) == tonumber(TEST_AMOUNT); simulateUsdaDeposit(TEST_USER2, "500000"); testTransfer(TEST_USER, TEST_USER2, "250000"); results.transfer = checkBalance(TEST_USER) == 750000 and checkBalance(TEST_USER2) == 750000; testBurn(TEST_USER, "100000"); results.burn = checkBalance(TEST_USER) == 650000; print("\n=== TEST RESULTS ==="); for test, result in pairs(results) do print(test .. ": " .. (result and "✓ PASS" or "✗ FAIL")) end; local passed = 0; local total = 0; for _, result in pairs(results) do total = total + 1; if result then passed = passed + 1 end end; print("\nTotal: " .. passed .. "/" .. total .. " tests passed"); return results end
print("\nRun tests with: runAllTests()")
print("Or test individually: testInfo(), testBalance(), testStats(), etc.")